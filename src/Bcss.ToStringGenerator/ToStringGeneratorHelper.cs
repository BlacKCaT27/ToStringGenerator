using System.Text;

namespace Bcss.ToStringGenerator;

/// <summary>
/// Provides helper methods for generating a string representation of a class in the form of a ToString() method.
/// This class is intended to help the source generation process by constructing the necessary code
/// based on the metadata of a given class.
/// </summary>
internal static class ToStringGeneratorHelper
{
    /// <summary>
    /// Generates a string representation of a class by creating a ToString() method
    /// using the provided class symbol data and a default redaction value.
    /// </summary>
    /// <param name="classSymbolData">
    /// The class metadata used to construct the ToString() method, including namespace,
    /// accessibility, class name, and its members.
    /// </param>
    /// <param name="toStringGeneratorConfigOptions">
    /// <see cref="ToStringGeneratorConfigOptions"/> containing configuration parameters for the ToString generator./>
    /// </param>
    /// <param name="cancellationToken"><see cref="CancellationToken"/>.</param>
    /// <returns>
    /// A string containing the generated source code for the ToString() method of the specified class.
    /// </returns>
    internal static string GenerateToStringMethod(ClassSymbolData classSymbolData, ToStringGeneratorConfigOptions toStringGeneratorConfigOptions, CancellationToken cancellationToken = default)
    {
        var sourceBuilder = new StringBuilder();
        AddUsingsAndNamespace(sourceBuilder, classSymbolData.ContainingNamespace, cancellationToken);
        AddTypeDeclaration(sourceBuilder, classSymbolData.ClassAccessibility, classSymbolData.ClassName, classSymbolData.IsStruct, cancellationToken);
        AddToStringMethod(sourceBuilder, classSymbolData, toStringGeneratorConfigOptions, cancellationToken);
        return sourceBuilder.ToString();
    }

    private static void AddUsingsAndNamespace(StringBuilder sourceBuilder, string namespaceName, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        
        sourceBuilder.AppendLine("// <auto-generated>");
        sourceBuilder.AppendLine("using System;");
        sourceBuilder.AppendLine("using System.Text;");
        sourceBuilder.AppendLine("using System.Collections.Generic;");
        
        if (namespaceName == "<global namespace>")
        {
            return;
        }
        
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"namespace {namespaceName};");
        sourceBuilder.AppendLine();
    }

    private static void AddTypeDeclaration(StringBuilder sourceBuilder, string classAccessibility, string className, bool isStruct, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        string objType = isStruct ? "struct" : "class";
        sourceBuilder.AppendLine("/// <summary>");
        sourceBuilder.AppendLine($"/// A partial implementation of {className} containing a generated ToString() implementation.");
        sourceBuilder.AppendLine("/// </summary>");
        sourceBuilder.AppendLine($"{classAccessibility} partial {objType} {className}");
        sourceBuilder.AppendLine("{");
    }

    private static void AddToStringMethod(StringBuilder sourceBuilder, ClassSymbolData classSymbolData, ToStringGeneratorConfigOptions toStringGeneratorConfigOptions, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        sourceBuilder.AppendLine("    /// <summary>");
        sourceBuilder.AppendLine("    /// Converts this class to a string representation containing the objects fields and properties.");
        sourceBuilder.AppendLine("    /// </summary>");
        sourceBuilder.AppendLine("    public override string ToString()");
        sourceBuilder.AppendLine("    {");
        sourceBuilder.AppendLine("        var sb = new StringBuilder();");
        sourceBuilder.AppendLine($"        sb.Append(\"[{classSymbolData.ClassName}: \");");
        sourceBuilder.AppendLine();

        AppendMembers(sourceBuilder, classSymbolData, toStringGeneratorConfigOptions, cancellationToken);

        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine("        sb.Append(\"]\");");
        sourceBuilder.AppendLine("        return sb.ToString();");
        sourceBuilder.AppendLine("    }");
        sourceBuilder.AppendLine("}");
    }
    
    private static void AppendMembers(StringBuilder sourceBuilder, ClassSymbolData classSymbolData, ToStringGeneratorConfigOptions toStringGeneratorConfigOptions, CancellationToken cancellationToken = default)
    {
        var firstMember = true;
        foreach (var member in classSymbolData.Members)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (member.MemberAccessibility.Contains("private"))
            {
                switch (classSymbolData.IncludePrivateDataMembers)
                {
                    // If the class-level attribute is set, honor it.
                    case false:
                    // If not, honor the global default unless the attribute-level config is set to true, in which case,
                    // include private data members for only this class.
                    case null when toStringGeneratorConfigOptions.IncludePrivateDataMembers == false:
                        continue;
                }
            }

            var memberName = member.MemberName;
            var separator = firstMember ? "" : ", ";

            // Include asterisks to denote static members.
            sourceBuilder.AppendLine(member.IsStatic
                ? $"        sb.Append(\"{separator}*{memberName}* = \");"
                : $"        sb.Append(\"{separator}{memberName} = \");");
            
            if (member.IsSensitive)
            {
                sourceBuilder.AppendLine($"        sb.Append(\"{member.Mask ?? toStringGeneratorConfigOptions.RedactionValue}\");");
            }
            else
            {
                if (member.IsDictionary)
                {
                    AppendDictionaryValue(sourceBuilder, memberName, member.IsNullableType, cancellationToken);
                }
                else if (member.IsEnumerable)
                {
                    AppendEnumerableValue(sourceBuilder, memberName, member.IsNullableType, cancellationToken);
                }
                else
                {
                    if (member.IsNullableType)
                    {
                        sourceBuilder.AppendLine($"        if ({memberName} == null)");
                        sourceBuilder.AppendLine("        {");
                        sourceBuilder.AppendLine("            sb.Append(\"null\");");
                        sourceBuilder.AppendLine("        }");
                        sourceBuilder.AppendLine("        else");
                        sourceBuilder.AppendLine("        {");
                        sourceBuilder.AppendLine($"            sb.Append({memberName}.ToString());");
                        sourceBuilder.AppendLine("        }");
                    }
                    else
                    {
                        sourceBuilder.AppendLine($"        sb.Append({memberName}.ToString());");
                    }
                }
            }
            
            firstMember = false;
        }
    }
    
    private static void AppendDictionaryValue(StringBuilder sourceBuilder, string memberName, bool isNullable, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();
        if (isNullable)
        {
            sourceBuilder.AppendLine($"        if ({memberName} == null)");
            sourceBuilder.AppendLine("        {");
            sourceBuilder.AppendLine("            sb.Append(\"null\");");
            sourceBuilder.AppendLine("        }");
            sourceBuilder.AppendLine("        else");
            sourceBuilder.AppendLine("        {");
            AppendDictionaryContents(sourceBuilder, memberName);
            sourceBuilder.AppendLine("        }");
        }
        else
        {
            AppendDictionaryContents(sourceBuilder, memberName);
        }
    }

    private static void AppendDictionaryContents(StringBuilder sourceBuilder, string memberName)
    {
        sourceBuilder.AppendLine("            sb.Append('[');");
        sourceBuilder.AppendLine($"            var {memberName}Enumerator = {memberName}.GetEnumerator();");
        sourceBuilder.AppendLine($"            if ({memberName}Enumerator.MoveNext())");
        sourceBuilder.AppendLine("            {");
        sourceBuilder.AppendLine($"                var pair = {memberName}Enumerator.Current;");
        sourceBuilder.AppendLine("                sb.Append('{');");
        sourceBuilder.AppendLine("                sb.Append(pair.Key.ToString());");
        sourceBuilder.AppendLine("                sb.Append(\", \");");
        sourceBuilder.AppendLine("                sb.Append(pair.Value.ToString());");
        sourceBuilder.AppendLine("                sb.Append('}');");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"                while ({memberName}Enumerator.MoveNext())");
        sourceBuilder.AppendLine("                {");
        sourceBuilder.AppendLine("                    sb.Append(\", \");");
        sourceBuilder.AppendLine($"                    pair = {memberName}Enumerator.Current;");
        sourceBuilder.AppendLine("                    sb.Append('{');");
        sourceBuilder.AppendLine("                    sb.Append(pair.Key.ToString());");
        sourceBuilder.AppendLine("                    sb.Append(\", \");");
        sourceBuilder.AppendLine("                    sb.Append(pair.Value.ToString());");
        sourceBuilder.AppendLine("                    sb.Append('}');");
        sourceBuilder.AppendLine("                }");
        sourceBuilder.AppendLine("            }");
        sourceBuilder.AppendLine("            sb.Append(']');");
    }

    private static void AppendEnumerableValue(StringBuilder sourceBuilder, string memberName, bool isNullable, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();
        if (isNullable)
        {
            sourceBuilder.AppendLine($"        if ({memberName} == null)");
            sourceBuilder.AppendLine("        {");
            sourceBuilder.AppendLine("            sb.Append(\"null\");");
            sourceBuilder.AppendLine("        }");
            sourceBuilder.AppendLine("        else");
            sourceBuilder.AppendLine("        {");
            AppendEnumerableContents(sourceBuilder, memberName);
            sourceBuilder.AppendLine("        }");
        }
        else
        {
            AppendEnumerableContents(sourceBuilder, memberName);
        }
    }

    private static void AppendEnumerableContents(StringBuilder sourceBuilder, string memberName)
    {
        sourceBuilder.AppendLine("            sb.Append('[');");
        sourceBuilder.AppendLine($"            var {memberName}Enumerator = {memberName}.GetEnumerator();");
        sourceBuilder.AppendLine($"            if ({memberName}Enumerator.MoveNext())");
        sourceBuilder.AppendLine("            {");
        sourceBuilder.AppendLine($"                sb.Append({memberName}Enumerator.Current.ToString());");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine($"                while ({memberName}Enumerator.MoveNext())");
        sourceBuilder.AppendLine("                {");
        sourceBuilder.AppendLine("                    sb.Append(\", \");");
        sourceBuilder.AppendLine($"                    sb.Append({memberName}Enumerator.Current.ToString());");
        sourceBuilder.AppendLine("                }");
        sourceBuilder.AppendLine("            }");
        sourceBuilder.AppendLine("            sb.Append(']');");
    }
}